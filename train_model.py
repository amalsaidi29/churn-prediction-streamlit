import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.preprocessing import LabelEncoder
import joblib
import os

# ğŸ”¹ Charger les donnÃ©es
df = pd.read_csv("Data4.csv")  # adapte si ton chemin est diffÃ©rent

# ğŸ”¹ Liste des 15 meilleures features (selon toi)
features = [
    'gender', 'SeniorCitizen', 'Partner', 'Dependents', 'tenure',
    'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity',
    'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV',
    'StreamingMovies', 'Contract'
]

target = 'Churn'

# ğŸ”¹ Encoder les colonnes catÃ©goriques
for col in df[features + [target]].select_dtypes(include='object').columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col].astype(str))

# ğŸ”¹ SÃ©parer les variables
X = df[features]
y = df[target]

# ğŸ”¹ Split des donnÃ©es
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ğŸ”¹ EntraÃ®ner le modÃ¨le
model = GradientBoostingClassifier()
model.fit(X_train, y_train)

# ğŸ”¹ CrÃ©er dossier model/ si besoin
os.makedirs("model", exist_ok=True)

# ğŸ”¹ Sauvegarder le modÃ¨le
joblib.dump(model, "model/gradient_boosting_model_15_features.pkl")

print("âœ… ModÃ¨le sauvegardÃ© avec succÃ¨s.")
